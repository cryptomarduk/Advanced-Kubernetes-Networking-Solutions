apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-toolbox
  namespace: network-tools
  labels:
    app: network-toolbox
spec:
  replicas: 1
  selector:
    matchLabels:
      app: network-toolbox
  template:
    metadata:
      labels:
        app: network-toolbox
    spec:
      containers:
      - name: network-toolbox
        image: nicolaka/netshoot:latest
        command: ["/bin/bash", "-c", "while true; do sleep 3600; done"]
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          privileged: true  # Required for some advanced network tools
        volumeMounts:
        - name: host-network
          mountPath: /host-network
      volumes:
      - name: host-network
        hostPath:
          path: /proc/sys/net
---
apiVersion: v1
kind: Service
metadata:
  name: network-toolbox
  namespace: network-tools
spec:
  selector:
    app: network-toolbox
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: network-diagnostic-scripts
  namespace: network-tools
data:
  check-connectivity.sh: |
    #!/bin/bash
    # Script to check connectivity to a service
    
    SERVICE=$1
    NAMESPACE=$2
    PORT=$3
    
    if [ -z "$SERVICE" ] || [ -z "$NAMESPACE" ]; then
      echo "Usage: $0 <service-name> <namespace> [port]"
      exit 1
    fi
    
    if [ -z "$PORT" ]; then
      PORT=80
    fi
    
    echo "Testing connectivity to $SERVICE.$NAMESPACE.svc.cluster.local:$PORT"
    
    # DNS resolution check
    echo "DNS resolution check:"
    nslookup $SERVICE.$NAMESPACE.svc.cluster.local
    
    # TCP connectivity check
    echo "TCP connectivity check:"
    nc -zv $SERVICE.$NAMESPACE.svc.cluster.local $PORT
    
    # HTTP check (if applicable)
    echo "HTTP check:"
    curl -v -m 5 http://$SERVICE.$NAMESPACE.svc.cluster.local:$PORT/health
    
    # Traceroute to see the path
    echo "Traceroute:"
    traceroute $SERVICE.$NAMESPACE.svc.cluster.local
    
    # MTR for continuous path analysis
    echo "MTR analysis (will run for 10 seconds):"
    mtr -c 10 $SERVICE.$NAMESPACE.svc.cluster.local
    
  check-dns.sh: |
    #!/bin/bash
    # Script to diagnose DNS issues
    
    HOST=$1
    
    if [ -z "$HOST" ]; then
      echo "Usage: $0 <hostname>"
      exit 1
    fi
    
    echo "===== DNS Diagnostics for $HOST ====="
    
    # Check DNS servers
    echo "DNS Servers:"
    cat /etc/resolv.conf | grep nameserver
    
    # Check DNS resolution using different tools
    echo "nslookup resolution:"
    nslookup $HOST
    
    echo "dig resolution:"
    dig $HOST
    
    echo "host resolution:"
    host $HOST
    
    # Check DNS for all cluster services
    echo "Checking kubernetes service DNS:"
    nslookup kubernetes.default.svc.cluster.local
    
    # Check DNS for multicluster services if any
    echo "Checking global service DNS:"
    nslookup $HOST.global || echo "No global service found"
    
  network-policy-test.sh: |
    #!/bin/bash
    # Script to test if network policies are working correctly
    
    TARGET_SERVICE=$1
    TARGET_NAMESPACE=$2
    TARGET_PORT=$3
    
    if [ -z "$TARGET_SERVICE" ] || [ -z "$TARGET_NAMESPACE" ]; then
      echo "Usage: $0 <target-service> <target-namespace> [target-port]"
      exit 1
    fi
    
    if [ -z "$TARGET_PORT" ]; then
      TARGET_PORT=80
    fi
    
    TARGET="$TARGET_SERVICE.$TARGET_NAMESPACE.svc.cluster.local"
    
    echo "===== Network Policy Test ====="
    echo "Testing connectivity to $TARGET:$TARGET_PORT"
    
    # Try HTTP connection
    echo "HTTP Test:"
    curl -v -m 5 http://$TARGET:$TARGET_PORT/ || echo "HTTP connection failed"
    
    # Try TCP connection
    echo "TCP Test:"
    nc -zv $TARGET $TARGET_PORT || echo "TCP connection failed"
    
    # Try UDP connection
    echo "UDP Test:"
    nc -zuv $TARGET $TARGET_PORT || echo "UDP connection failed"
    
    echo "===== Packet Capture ====="
    # Capture packets for 10 seconds
    timeout 10 tcpdump -i any host $TARGET
